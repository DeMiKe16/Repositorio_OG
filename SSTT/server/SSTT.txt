def enviar_mensaje(cs, data):
    """ Esta función envía datos (data) a través del socket cs
        Devuelve el número de bytes enviados.
    """
    try:
        return cs.send(data)
    except Exception as e:
        logging.error(f"Error en enviar_mensaje: {e}")
        return -1


def recibir_mensaje(cs):
    """ Esta función recibe datos a través del socket cs
        Leemos la información que nos llega. recv() devuelve un string con los datos.
    """
    try:
        data = cs.recv(BUFSIZE)
        return data
    except Exception as e:
        logging.error(f"Error en recibir_mensaje: {e}")
        return None


def cerrar_conexion(cs):
    """ Esta función cierra una conexión activa.
    """
    try:
        cs.close()
    except Exception as e:
        logging.error(f"Error en cerrar_conexion: {e}")
        

def process_cookies(headers, cs):
    """ Esta función procesa la cookie cookie_counter
        1. Se analizan las cabeceras en headers para buscar la cabecera Cookie
        2. Una vez encontrada una cabecera Cookie se comprueba si el valor es cookie_counter
        3. Si no se encuentra cookie_counter , se devuelve 1
        4. Si se encuentra y tiene el valor MAX_ACCESSOS se devuelve MAX_ACCESOS
        5. Si se encuentra y tiene un valor 1 <= x < MAX_ACCESOS se incrementa en 1 y se devuelve el valor
    """
    cookie = None
    for header in headers:
        if header.startswith("Cookie:"):
            cookie = header.split("Cookie:")[1].strip()
            break
    if not cookie:
        return 1

    cookie_counter = re.search("cookie_counter=([0-9]+)", cookie)
    if not cookie_counter:
        return 1

    cookie_counter = int(cookie_counter.group(1))
    if cookie_counter >= MAX_ACCESOS:
        return MAX_ACCESOS
    else:
        cookie_counter += 1
    # Enviamos la nueva cookie en la respuesta
    cookie = f"cookie_counter={cookie_counter}"
    enviar_mensaje(cs, f"Set-Cookie: {cookie}\r\n".encode())
    return cookie_counter

def process_web_request(cs, webroot):
cookie_counter = 0
while True:
ready = select.select([cs], [], [], TIMEOUT_CONNECTION)
if ready[0]:
data = cs.recv(BUFSIZE)
if not data:
cs.close()
break
request_line, headers = parse_request(data)
method, url, http_version = parse_request_line(request_line)
if method != "GET":
send_error(cs, 405, "Method Not Allowed")
cs.close()
break
url = parse_url(url)
if url == "/":
url = "/index.html"
filepath = os.path.join(webroot, url[1:])
if not os.path.isfile(filepath):
send_error(cs, 404, "Not Found")
cs.close()
break
headers = parse_headers(headers)
for header, value in headers.items():
if header.lower() == "cookie":
cookie_counter = int(value.split("=")[1])
if cookie_counter >= MAX_ACCESOS:
send_error(cs, 403, "Forbidden")
cs.close()
break
file_size = os.path.getsize(filepath)
content_type, encoding = mimetypes.guess_type(filepath)
response = build_response(200, "OK", file_size, content_type, cookie_counter)
cs.sendall(response.encode())
with open(filepath, "rb") as f:
while True:
chunk = f.read(BUFSIZE)
if not chunk:
break
cs.sendall(chunk)
else:
cs.close()
break

def parse_request(data):
lines = data.splitlines()
request_line = lines[0].decode()
headers = {line.split(b":")[0].decode(): line.split(b":")[1].decode().strip() for line in lines[1:]}
return request_line, headers

def parse_request_line(request_line):
parts = request_line.split()
method = parts[0]
url = parts[1]
http_version = parts[2]
return method, url, http_version

def parse_url(url):
if "?" in url:
url = url.split("?")[0]
return url

def parse_headers(headers):
return headers

def send_error(cs, status_code, status_message):
response = build_error_response(status_code, status_message)
cs.sendall(response.encode())

def build_response(status_code, status_message, file_size, content_type, cookie_counter):
cookie_counter += 1
    
